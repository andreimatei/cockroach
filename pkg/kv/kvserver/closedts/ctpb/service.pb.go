// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kv/kvserver/closedts/ctpb/service.proto

package ctpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import hlc "github.com/cockroachdb/cockroach/pkg/util/hlc"

import github_com_cockroachdb_cockroach_pkg_roachpb "github.com/cockroachdb/cockroach/pkg/roachpb"

import (
	context "context"
	grpc "google.golang.org/grpc"
)

import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Group struct {
	// id identifies this group across multiple Group messages. ids are unique across a stream of messages
	// coming on one InactiveRangesClosedTimestamp
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// closed_timestamp is the timestamp that's being closed for all the ranges in the group.
	ClosedTimestamp hlc.Timestamp                                                `protobuf:"bytes,2,opt,name=closed_timestamp,json=closedTimestamp,proto3" json:"closed_timestamp"`
	Additions       map[github_com_cockroachdb_cockroach_pkg_roachpb.RangeID]LAI `protobuf:"bytes,3,rep,name=additions,proto3,castkey=github.com/cockroachdb/cockroach/pkg/roachpb.RangeID,castvalue=LAI" json:"additions,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Removals        map[github_com_cockroachdb_cockroach_pkg_roachpb.RangeID]LAI `protobuf:"bytes,4,rep,name=removals,proto3,castkey=github.com/cockroachdb/cockroach/pkg/roachpb.RangeID,castvalue=LAI" json:"removals,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *Group) Reset()         { *m = Group{} }
func (m *Group) String() string { return proto.CompactTextString(m) }
func (*Group) ProtoMessage()    {}
func (*Group) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_810f284ae6c7b8f9, []int{0}
}
func (m *Group) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Group) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *Group) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Group.Merge(dst, src)
}
func (m *Group) XXX_Size() int {
	return m.Size()
}
func (m *Group) XXX_DiscardUnknown() {
	xxx_messageInfo_Group.DiscardUnknown(m)
}

var xxx_messageInfo_Group proto.InternalMessageInfo

// Update represents !!!
type Update struct {
	Groups []*Group `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (m *Update) Reset()         { *m = Update{} }
func (m *Update) String() string { return proto.CompactTextString(m) }
func (*Update) ProtoMessage()    {}
func (*Update) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_810f284ae6c7b8f9, []int{1}
}
func (m *Update) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Update) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *Update) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Update.Merge(dst, src)
}
func (m *Update) XXX_Size() int {
	return m.Size()
}
func (m *Update) XXX_DiscardUnknown() {
	xxx_messageInfo_Update.DiscardUnknown(m)
}

var xxx_messageInfo_Update proto.InternalMessageInfo

type UpdateResponse struct {
}

func (m *UpdateResponse) Reset()         { *m = UpdateResponse{} }
func (m *UpdateResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateResponse) ProtoMessage()    {}
func (*UpdateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_810f284ae6c7b8f9, []int{2}
}
func (m *UpdateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *UpdateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateResponse.Merge(dst, src)
}
func (m *UpdateResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Group)(nil), "cockroach.kv.kvserver.ctupdate.Group")
	proto.RegisterMapType((map[github_com_cockroachdb_cockroach_pkg_roachpb.RangeID]LAI)(nil), "cockroach.kv.kvserver.ctupdate.Group.AdditionsEntry")
	proto.RegisterMapType((map[github_com_cockroachdb_cockroach_pkg_roachpb.RangeID]LAI)(nil), "cockroach.kv.kvserver.ctupdate.Group.RemovalsEntry")
	proto.RegisterType((*Update)(nil), "cockroach.kv.kvserver.ctupdate.Update")
	proto.RegisterType((*UpdateResponse)(nil), "cockroach.kv.kvserver.ctupdate.UpdateResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ClosedTimestampClient is the client API for ClosedTimestamp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClosedTimestampClient interface {
	Get(ctx context.Context, opts ...grpc.CallOption) (ClosedTimestamp_GetClient, error)
}

type closedTimestampClient struct {
	cc *grpc.ClientConn
}

func NewClosedTimestampClient(cc *grpc.ClientConn) ClosedTimestampClient {
	return &closedTimestampClient{cc}
}

func (c *closedTimestampClient) Get(ctx context.Context, opts ...grpc.CallOption) (ClosedTimestamp_GetClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ClosedTimestamp_serviceDesc.Streams[0], "/cockroach.kv.kvserver.ctupdate.ClosedTimestamp/Get", opts...)
	if err != nil {
		return nil, err
	}
	x := &closedTimestampGetClient{stream}
	return x, nil
}

type ClosedTimestamp_GetClient interface {
	Send(*Reaction) error
	Recv() (*Entry, error)
	grpc.ClientStream
}

type closedTimestampGetClient struct {
	grpc.ClientStream
}

func (x *closedTimestampGetClient) Send(m *Reaction) error {
	return x.ClientStream.SendMsg(m)
}

func (x *closedTimestampGetClient) Recv() (*Entry, error) {
	m := new(Entry)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClosedTimestampServer is the server API for ClosedTimestamp service.
type ClosedTimestampServer interface {
	Get(ClosedTimestamp_GetServer) error
}

func RegisterClosedTimestampServer(s *grpc.Server, srv ClosedTimestampServer) {
	s.RegisterService(&_ClosedTimestamp_serviceDesc, srv)
}

func _ClosedTimestamp_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClosedTimestampServer).Get(&closedTimestampGetServer{stream})
}

type ClosedTimestamp_GetServer interface {
	Send(*Entry) error
	Recv() (*Reaction, error)
	grpc.ServerStream
}

type closedTimestampGetServer struct {
	grpc.ServerStream
}

func (x *closedTimestampGetServer) Send(m *Entry) error {
	return x.ServerStream.SendMsg(m)
}

func (x *closedTimestampGetServer) Recv() (*Reaction, error) {
	m := new(Reaction)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ClosedTimestamp_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cockroach.kv.kvserver.ctupdate.ClosedTimestamp",
	HandlerType: (*ClosedTimestampServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Get",
			Handler:       _ClosedTimestamp_Get_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "kv/kvserver/closedts/ctpb/service.proto",
}

// InactiveRangesClosedTimestampClient is the client API for InactiveRangesClosedTimestamp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InactiveRangesClosedTimestampClient interface {
	UpdateClosedTimestamps(ctx context.Context, opts ...grpc.CallOption) (InactiveRangesClosedTimestamp_UpdateClosedTimestampsClient, error)
}

type inactiveRangesClosedTimestampClient struct {
	cc *grpc.ClientConn
}

func NewInactiveRangesClosedTimestampClient(cc *grpc.ClientConn) InactiveRangesClosedTimestampClient {
	return &inactiveRangesClosedTimestampClient{cc}
}

func (c *inactiveRangesClosedTimestampClient) UpdateClosedTimestamps(ctx context.Context, opts ...grpc.CallOption) (InactiveRangesClosedTimestamp_UpdateClosedTimestampsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_InactiveRangesClosedTimestamp_serviceDesc.Streams[0], "/cockroach.kv.kvserver.ctupdate.InactiveRangesClosedTimestamp/UpdateClosedTimestamps", opts...)
	if err != nil {
		return nil, err
	}
	x := &inactiveRangesClosedTimestampUpdateClosedTimestampsClient{stream}
	return x, nil
}

type InactiveRangesClosedTimestamp_UpdateClosedTimestampsClient interface {
	Send(*Update) error
	Recv() (*UpdateResponse, error)
	grpc.ClientStream
}

type inactiveRangesClosedTimestampUpdateClosedTimestampsClient struct {
	grpc.ClientStream
}

func (x *inactiveRangesClosedTimestampUpdateClosedTimestampsClient) Send(m *Update) error {
	return x.ClientStream.SendMsg(m)
}

func (x *inactiveRangesClosedTimestampUpdateClosedTimestampsClient) Recv() (*UpdateResponse, error) {
	m := new(UpdateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// InactiveRangesClosedTimestampServer is the server API for InactiveRangesClosedTimestamp service.
type InactiveRangesClosedTimestampServer interface {
	UpdateClosedTimestamps(InactiveRangesClosedTimestamp_UpdateClosedTimestampsServer) error
}

func RegisterInactiveRangesClosedTimestampServer(s *grpc.Server, srv InactiveRangesClosedTimestampServer) {
	s.RegisterService(&_InactiveRangesClosedTimestamp_serviceDesc, srv)
}

func _InactiveRangesClosedTimestamp_UpdateClosedTimestamps_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(InactiveRangesClosedTimestampServer).UpdateClosedTimestamps(&inactiveRangesClosedTimestampUpdateClosedTimestampsServer{stream})
}

type InactiveRangesClosedTimestamp_UpdateClosedTimestampsServer interface {
	Send(*UpdateResponse) error
	Recv() (*Update, error)
	grpc.ServerStream
}

type inactiveRangesClosedTimestampUpdateClosedTimestampsServer struct {
	grpc.ServerStream
}

func (x *inactiveRangesClosedTimestampUpdateClosedTimestampsServer) Send(m *UpdateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *inactiveRangesClosedTimestampUpdateClosedTimestampsServer) Recv() (*Update, error) {
	m := new(Update)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _InactiveRangesClosedTimestamp_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cockroach.kv.kvserver.ctupdate.InactiveRangesClosedTimestamp",
	HandlerType: (*InactiveRangesClosedTimestampServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UpdateClosedTimestamps",
			Handler:       _InactiveRangesClosedTimestamp_UpdateClosedTimestamps_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "kv/kvserver/closedts/ctpb/service.proto",
}

func (m *Group) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Group) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Id))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintService(dAtA, i, uint64(m.ClosedTimestamp.Size()))
	n1, err := m.ClosedTimestamp.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.Additions) > 0 {
		keysForAdditions := make([]int32, 0, len(m.Additions))
		for k := range m.Additions {
			keysForAdditions = append(keysForAdditions, int32(k))
		}
		github_com_gogo_protobuf_sortkeys.Int32s(keysForAdditions)
		for _, k := range keysForAdditions {
			dAtA[i] = 0x1a
			i++
			v := m.Additions[github_com_cockroachdb_cockroach_pkg_roachpb.RangeID(k)]
			mapSize := 1 + sovService(uint64(k)) + 1 + sovService(uint64(v))
			i = encodeVarintService(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintService(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			i = encodeVarintService(dAtA, i, uint64(v))
		}
	}
	if len(m.Removals) > 0 {
		keysForRemovals := make([]int32, 0, len(m.Removals))
		for k := range m.Removals {
			keysForRemovals = append(keysForRemovals, int32(k))
		}
		github_com_gogo_protobuf_sortkeys.Int32s(keysForRemovals)
		for _, k := range keysForRemovals {
			dAtA[i] = 0x22
			i++
			v := m.Removals[github_com_cockroachdb_cockroach_pkg_roachpb.RangeID(k)]
			mapSize := 1 + sovService(uint64(k)) + 1 + sovService(uint64(v))
			i = encodeVarintService(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintService(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			i = encodeVarintService(dAtA, i, uint64(v))
		}
	}
	return i, nil
}

func (m *Update) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Update) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for _, msg := range m.Groups {
			dAtA[i] = 0xa
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UpdateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Group) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovService(uint64(m.Id))
	}
	l = m.ClosedTimestamp.Size()
	n += 1 + l + sovService(uint64(l))
	if len(m.Additions) > 0 {
		for k, v := range m.Additions {
			_ = k
			_ = v
			mapEntrySize := 1 + sovService(uint64(k)) + 1 + sovService(uint64(v))
			n += mapEntrySize + 1 + sovService(uint64(mapEntrySize))
		}
	}
	if len(m.Removals) > 0 {
		for k, v := range m.Removals {
			_ = k
			_ = v
			mapEntrySize := 1 + sovService(uint64(k)) + 1 + sovService(uint64(v))
			n += mapEntrySize + 1 + sovService(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Update) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *UpdateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovService(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Group) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Group: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Group: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClosedTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClosedTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Additions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Additions == nil {
				m.Additions = make(map[github_com_cockroachdb_cockroach_pkg_roachpb.RangeID]LAI)
			}
			var mapkey int32
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipService(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthService
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Additions[github_com_cockroachdb_cockroach_pkg_roachpb.RangeID(mapkey)] = ((LAI)(mapvalue))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Removals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Removals == nil {
				m.Removals = make(map[github_com_cockroachdb_cockroach_pkg_roachpb.RangeID]LAI)
			}
			var mapkey int32
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipService(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthService
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Removals[github_com_cockroachdb_cockroach_pkg_roachpb.RangeID(mapkey)] = ((LAI)(mapvalue))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Update) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Update: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Update: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &Group{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipService(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("kv/kvserver/closedts/ctpb/service.proto", fileDescriptor_service_810f284ae6c7b8f9)
}

var fileDescriptor_service_810f284ae6c7b8f9 = []byte{
	// 522 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0x4f, 0x8b, 0xd3, 0x40,
	0x18, 0xc6, 0x33, 0x4d, 0xb7, 0xe8, 0x2c, 0x76, 0xcb, 0xb0, 0x48, 0x08, 0x6e, 0x5a, 0x0a, 0xbb,
	0xf6, 0x34, 0x23, 0xdd, 0x3d, 0x88, 0x7f, 0x90, 0xad, 0x4a, 0x29, 0x88, 0x87, 0xa0, 0x17, 0x11,
	0x64, 0x3a, 0x19, 0xd2, 0x90, 0x34, 0x13, 0x32, 0x93, 0xc0, 0x5e, 0x3d, 0xea, 0x65, 0xc1, 0x83,
	0x5f, 0xa9, 0xc7, 0x3d, 0xee, 0xc9, 0xd5, 0xf6, 0x8b, 0x48, 0x26, 0x69, 0xcb, 0x16, 0xb4, 0x15,
	0xbc, 0xbd, 0x99, 0x77, 0x9e, 0x67, 0x7e, 0xef, 0x33, 0x19, 0xf8, 0x30, 0xcc, 0x49, 0x98, 0x4b,
	0x9e, 0xe6, 0x3c, 0x25, 0x2c, 0x12, 0x92, 0x7b, 0x4a, 0x12, 0xa6, 0x92, 0x31, 0x29, 0x16, 0x03,
	0xc6, 0x71, 0x92, 0x0a, 0x25, 0x90, 0xc3, 0x04, 0x0b, 0x53, 0x41, 0xd9, 0x04, 0x87, 0x39, 0x5e,
	0x4a, 0x30, 0x53, 0x59, 0xe2, 0x51, 0xc5, 0xed, 0xe3, 0x3f, 0x1b, 0xf1, 0x58, 0xa5, 0x17, 0xa5,
	0x8d, 0x7d, 0xe8, 0x0b, 0x5f, 0xe8, 0x92, 0x14, 0x55, 0xb5, 0xfa, 0xc0, 0x17, 0xc2, 0x8f, 0x38,
	0xa1, 0x49, 0x40, 0x68, 0x1c, 0x0b, 0x45, 0x55, 0x20, 0x62, 0x59, 0x75, 0xad, 0x4c, 0x05, 0x11,
	0x99, 0x44, 0x8c, 0xa8, 0x60, 0xca, 0xa5, 0xa2, 0xd3, 0xa4, 0xec, 0x74, 0xbf, 0xd6, 0xe1, 0xde,
	0x30, 0x15, 0x59, 0x82, 0x9a, 0xb0, 0x16, 0x78, 0x16, 0xe8, 0x80, 0xde, 0x9e, 0x5b, 0x0b, 0x3c,
	0xf4, 0x16, 0xb6, 0x4a, 0x88, 0x4f, 0x2b, 0x8d, 0x55, 0xeb, 0x80, 0xde, 0x7e, 0xff, 0x08, 0xaf,
	0x27, 0x29, 0x8c, 0xf1, 0x24, 0x62, 0xf8, 0xdd, 0x72, 0xd3, 0xa0, 0x3e, 0xfb, 0xd1, 0x36, 0xdc,
	0x83, 0x52, 0xbc, 0x5a, 0x46, 0xdf, 0x00, 0xbc, 0x4b, 0x3d, 0x2f, 0xd0, 0x5c, 0x96, 0xd9, 0x31,
	0x7b, 0xfb, 0xfd, 0x33, 0xfc, 0xf7, 0x4c, 0xb0, 0x46, 0xc3, 0xe7, 0x4b, 0xd9, 0xeb, 0x22, 0x87,
	0xc1, 0x8b, 0xcf, 0x37, 0xed, 0x33, 0x3f, 0x50, 0x93, 0x6c, 0x8c, 0x99, 0x98, 0x92, 0x95, 0x87,
	0x37, 0x5e, 0xd7, 0x24, 0x09, 0x7d, 0xa2, 0xab, 0x64, 0x8c, 0x5d, 0x1a, 0xfb, 0x7c, 0xf4, 0xea,
	0xcb, 0x4d, 0xdb, 0x7c, 0x73, 0x3e, 0x72, 0xd7, 0x1c, 0xe8, 0x12, 0xc0, 0x3b, 0x29, 0x9f, 0x8a,
	0x9c, 0x46, 0xd2, 0xaa, 0x6b, 0xa8, 0xd3, 0xdd, 0xa0, 0xdc, 0x4a, 0xf5, 0x9f, 0x98, 0x56, 0x14,
	0xf6, 0x33, 0xd8, 0xbc, 0x3d, 0x30, 0x6a, 0x41, 0x33, 0xe4, 0x17, 0xd5, 0xdd, 0x14, 0x25, 0x3a,
	0x84, 0x7b, 0x39, 0x8d, 0x32, 0xae, 0x6f, 0xc4, 0x74, 0xcb, 0x8f, 0x27, 0xb5, 0xc7, 0xc0, 0x7e,
	0x0a, 0xef, 0xdd, 0x22, 0xfb, 0x17, 0x71, 0x77, 0x08, 0x1b, 0xef, 0xf5, 0x8c, 0xe8, 0x39, 0x6c,
	0xf8, 0xc5, 0x98, 0xd2, 0x02, 0x3a, 0x94, 0xe3, 0x9d, 0x42, 0x71, 0x2b, 0x51, 0xb7, 0x05, 0x9b,
	0xa5, 0x91, 0xcb, 0x65, 0x22, 0x62, 0xc9, 0xfb, 0x02, 0x1e, 0xbc, 0xdc, 0xf8, 0x23, 0x3e, 0x42,
	0x73, 0xc8, 0x15, 0xea, 0x6d, 0xb3, 0x76, 0x39, 0x65, 0x45, 0x1a, 0xf6, 0x56, 0x08, 0x3d, 0x71,
	0xd7, 0xe8, 0x81, 0x47, 0xa0, 0xff, 0x1d, 0xc0, 0xa3, 0x51, 0x5c, 0x28, 0x73, 0xae, 0xb3, 0x96,
	0x9b, 0xe7, 0xe7, 0xf0, 0x7e, 0x09, 0xb9, 0xd1, 0x90, 0xe8, 0x64, 0xdb, 0x41, 0xa5, 0xce, 0xc6,
	0xbb, 0xed, 0x5b, 0x86, 0x50, 0x92, 0x0d, 0x4e, 0x66, 0xbf, 0x1c, 0x63, 0x36, 0x77, 0xc0, 0xd5,
	0xdc, 0x01, 0xd7, 0x73, 0x07, 0xfc, 0x9c, 0x3b, 0xe0, 0x72, 0xe1, 0x18, 0x57, 0x0b, 0xc7, 0xb8,
	0x5e, 0x38, 0xc6, 0x87, 0x7a, 0xf1, 0xea, 0xc7, 0x0d, 0xfd, 0x44, 0x4f, 0x7f, 0x07, 0x00, 0x00,
	0xff, 0xff, 0x0d, 0x66, 0x3a, 0x93, 0x62, 0x04, 0x00, 0x00,
}
